#!/usr/bin/env bash

DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

BRIGHT_GREEN="\033[1;32m"
RESET="\033[0m"

# Standard green (not bold)
GREEN="\033[32m"

# Bold green (most common for success)
BOLD_GREEN="\033[1;32m"

# Bright green (brighter than bold)
BRIGHT_GREEN="\033[92m"

# Soft teal/cyan - very readable, calm
SOFT_GREEN="\033[38;2;166;227;161m"    # Catppuccin Green
TEAL="\033[38;2;148;226;213m"          # Catppuccin Teal
SOFT_BLUE="\033[38;2;137;180;250m"     # Catppuccin Blue

# Warm options
PEACH="\033[38;2;250;179;135m"         # Catppuccin Peach
YELLOW="\033[38;2;249;226;175m"        # Catppuccin Yellow

# Cool purple/lavender
MAUVE="\033[38;2;203;166;247m"         # Catppuccin Mauve
LAVENDER="\033[38;2;180;190;254m"      # Catppuccin Lavender

MOCHA_RED="\033[38;2;243;139;168m"

INFO_COLOUR=$TEAL
SUCCESS_COLOUR=$SOFT_GREEN
FAILURE_COLOUR=$MOCHA_RED

echo_success() {
  echo -e "${SUCCESS_COLOUR}$@${RESET}"
}

echo_info() {
  echo -e "${INFO_COLOUR}$@${RESET}"
}

echo_failure() {
  echo -e "${FAILURE_COLOUR}$@${RESET}"
}

run_and_log() {
  echo_info "─────────────────────────────────────────────────"
  echo_info "$@"
  echo_info "─────────────────────────────────────────────────"
  eval "$@"
  result=$?
  if [[ $? -eq 0 ]]; then
    echo_success "✓ ok"
  else
    echo_failure "✗ Failed"
  fi
  return $result
}

check_brew_is_installed() {
  command -v brew >/dev/null
  brew_exists_result=$?
  if [[ $brew_exists_result -eq 0 ]]; then
    echo "brew is already installed"
  else
    echo "I require homebrew to be installed first. Do that, then try again"
    exit 1
  fi
}

install_fswatch() {
  command -v fswatch >/dev/null
  fswatch_exists_result=$?
  if [[ $fswatch_exists_result -eq 0 ]]; then
    echo "fswatch is already installed"
  else
    echo "About to install fswatch..."
    brew install fswatch
    install_fswach_result=$?

    if [[ $install_fswach_result -eq 0 ]]; then
      echo "Installed fswatch OK"
    else
      echo "Failed to install fswatch :-( fail. You're on your own now :-("
      exit 1
    fi
  fi
}

check_os_is_debian() {
  (cat /proc/version | grep "Debian") >/dev/null
  debian_result=$?
  if [[ $debian_result -eq 0 ]]; then
    echo "OS is Debian OK"
  else
    echo "I only know how to install for Debian, and you're not debian :-("
    exit 1
  fi
}

install_inotify_tools() {
  (dpkg -l | grep inotify-tools) >/dev/null
  inotify_tools_installed_result=$?
  if [[ $inotify_tools_installed_result -eq 0 ]]; then
    echo "inotify-tools is already installed OK"
  else
    echo "About to install inotify-tools..."
    sudo apt install inotify-tools -y
    install_inotify_tools_result=$?

    if [[ $install_inotify_tools_result -eq 0 ]]; then
      echo "Installed inotify-tools OK"
    else
      echo "Failed to install inotify-tools :-( fail. You're on your own now :-("
      exit 1
    fi
  fi
}

check_elixir_installed() {
  command -v elixir &> /dev/null
  if [[ $? -eq 0 ]]; then
    echo "elixir is already installed OK"
  else
    echo "I require Elixir to be installed to work. Install Elixir and try again :-("
    exit 1
  fi
}

build() {
  echo "building polyglot_watcher_v2..."
  ./build
  if [[ $? -eq 0 ]]; then
    echo "built polyglot_watcher_v2 OK"
  else
    echo "failed to build polyglot_watcher_v2 :-("
    exit 1
  fi
}

create_symlink_to_local_bin() {
  run_and_log "rm -f ~/.local/bin/polyglot_watcher_v2"
  run_and_log "mkdir -p ~/.local/bin"
  run_and_log "ln -sf $DIR/polyglot_watcher_v2 ~/.local/bin/polyglot_watcher_v2"
  if [[ $? -ne 0 ]]; then
    exit 1
  fi
}

create_symlink_for_mac() {
  sudo ln -sf $DIR/polyglot_watcher_v2 /usr/local/bin/polyglot_watcher_v2
  if [[ $? -eq 0 ]]; then
    echo "created polyglot_watcher_v2 symlink to /usr/local/bin/polyglot_watcher_v2 OK"
  else
    echo "created to create polyglot_watcher_v2 symlink :-("
    exit 1
  fi
}

create_config_files() {
  MIX_ENV=prod mix polyglot_watcher_v2.setup_config_files
  if [[ $? -eq 0 ]]; then
    echo "created polyglot_watcher_v2 config files OK"
  else
    echo "failed to create polyglot_watcher_v2 config files :-("
    exit 1
  fi
}

install_for_mac() {
  check_brew_is_installed
  install_fswatch
  check_elixir_installed
  build
  create_config_files
  create_symlink_for_mac
  echo "Everything installed OK"
  echo "You should now simply be able to run 'polyglot_watcher_v2' now!"
}

install_for_debian() {
  check_os_is_debian
  install_inotify_tools
  check_elixir_installed
  build
  create_config_files
  create_symlink_to_local_bin
  echo "Everything installed OK"
  echo "You should now simply be able to run 'polyglot_watcher_v2' now!"
}

install_for_nixos() {
  create_config_files
  create_symlink_to_local_bin
  echo_success "✓ Installation successful!"
}

if [[ $OSTYPE == darwin* ]]; then
  echo "mac"
  #install_for_mac
elif [[ $OSTYPE == linux-gnu ]]; then
  # Get the distro ID
  if [ -f /etc/os-release ]; then
    DISTRO=$(awk -F'=' '/^ID=/ {print $2}' /etc/os-release)
    case $DISTRO in
      nixos)
        echo_info "NixOS detected, installing for nixos..."
        install_for_nixos
        ;;
      ubuntu|debian)
        install_for_debian
        ;;
      *)
        install_for_debian
        ;;
    esac
  else
    echo "linux-gnu (unknown distro)"
    # install_for_debian
  fi
else
  echo "Installing on your OS $OSTYPE is not yet supported :-("
  exit 1
fi
