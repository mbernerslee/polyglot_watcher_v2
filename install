#!/usr/bin/env bash

DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

RESET="\033[0m"

# Soft teal/cyan - very readable, calm
SOFT_GREEN="\033[38;2;166;227;161m"    # Catppuccin Green
TEAL="\033[38;2;148;226;213m"          # Catppuccin Teal
MOCHA_RED="\033[38;2;243;139;168m"

INFO_COLOUR=$TEAL
SUCCESS_COLOUR=$SOFT_GREEN
FAILURE_COLOUR=$MOCHA_RED

echo_success() {
  echo -e "${SUCCESS_COLOUR}$@${RESET}"
}

echo_info() {
  echo -e "${INFO_COLOUR}$@${RESET}"
}

echo_failure() {
  echo -e "${FAILURE_COLOUR}$@${RESET}"
}

calculate_duration() {
  local start_time="$1"
  local end_time="$2"

  duration=$(echo "$end_time - $start_time" | bc)

  # Pretty format the duration
  if (( $(echo "$duration >= 60" | bc -l) )); then
    # More than 1 minute
    minutes=$(echo "$duration / 60" | bc)
    seconds=$(echo "$duration % 60" | bc)
    duration_str="${minutes}m${seconds}s"
  elif (( $(echo "$duration >= 1" | bc -l) )); then
    # More than 1 second
    duration_str=$(printf "%.1fs" "$duration")
  else
    # Less than 1 second
    milliseconds=$(echo "$duration * 1000" | bc)
    duration_str=$(printf "%.0fms" "$milliseconds")
  fi

  echo "$duration_str"
}

run_and_log() {
  echo_info "$(printf '%.0s─' {1..60})"
  echo_info "$@"
  echo_info "$(printf '%.0s─' {1..60})"

  start_time=$(date +%s.%N)
  eval "$@"
  result=$?
  end_time=$(date +%s.%N)

  duration_str=$(calculate_duration "$start_time" "$end_time")

  if [[ $result -eq 0 ]]; then
    echo_success "✓ completed in ${duration_str}"
  else
    echo_failure "✗ failed after ${duration_str}"
  fi

  return $result
}

check_brew_is_installed() {
  command -v brew >/dev/null
  brew_exists_result=$?
  if [[ $brew_exists_result -eq 0 ]]; then
    echo "brew is already installed"
  else
    echo "I require homebrew to be installed first. Do that, then try again"
    exit 1
  fi
}

install_fswatch() {
  command -v fswatch >/dev/null
  fswatch_exists_result=$?
  if [[ $fswatch_exists_result -eq 0 ]]; then
    echo "fswatch is already installed"
  else
    echo "About to install fswatch..."
    brew install fswatch
    install_fswach_result=$?

    if [[ $install_fswach_result -eq 0 ]]; then
      echo "Installed fswatch OK"
    else
      echo "Failed to install fswatch :-( fail. You're on your own now :-("
      exit 1
    fi
  fi
}

check_os_is_debian() {
  (cat /proc/version | grep "Debian") >/dev/null
  debian_result=$?
  if [[ $debian_result -eq 0 ]]; then
    echo "OS is Debian OK"
  else
    echo "I only know how to install for Debian, and you're not debian :-("
    exit 1
  fi
}

install_inotify_tools() {
  (dpkg -l | grep inotify-tools) >/dev/null
  inotify_tools_installed_result=$?
  if [[ $inotify_tools_installed_result -eq 0 ]]; then
    echo "inotify-tools is already installed OK"
  else
    echo "About to install inotify-tools..."
    sudo apt install inotify-tools -y
    install_inotify_tools_result=$?

    if [[ $install_inotify_tools_result -eq 0 ]]; then
      echo "Installed inotify-tools OK"
    else
      echo "Failed to install inotify-tools :-( fail. You're on your own now :-("
      exit 1
    fi
  fi
}

check_elixir_installed() {
  command -v elixir &> /dev/null
  if [[ $? -eq 0 ]]; then
    echo "elixir is already installed OK"
  else
    echo "I require Elixir to be installed to work. Install Elixir and try again :-("
    exit 1
  fi
}

build() {
  echo "building polyglot_watcher_v2..."
  ./build
  if [[ $? -eq 0 ]]; then
    echo "built polyglot_watcher_v2 OK"
  else
    echo "failed to build polyglot_watcher_v2 :-("
    exit 1
  fi
}

create_symlink_to_local_bin() {
  run_and_log "rm -f ~/.local/bin/polyglot_watcher_v2"
  run_and_log "mkdir -p ~/.local/bin"
  run_and_log "ln -sf $DIR/polyglot_watcher_v2 ~/.local/bin/polyglot_watcher_v2"
  if [[ $? -ne 0 ]]; then
    exit 1
  fi
}

create_symlink_for_mac() {
  sudo ln -sf $DIR/polyglot_watcher_v2 /usr/local/bin/polyglot_watcher_v2
  if [[ $? -eq 0 ]]; then
    echo "created polyglot_watcher_v2 symlink to /usr/local/bin/polyglot_watcher_v2 OK"
  else
    echo "created to create polyglot_watcher_v2 symlink :-("
    exit 1
  fi
}

create_config_files() {
  run_and_log "MIX_ENV=prod mix polyglot_watcher_v2.setup_config_files"
  if [[ $? -ne 0 ]]; then
    exit 1
  fi
}

install_for_mac() {
  check_brew_is_installed
  install_fswatch
  check_elixir_installed
  build
  create_config_files
  create_symlink_for_mac
  echo "Everything installed OK"
  echo "You should now simply be able to run 'polyglot_watcher_v2' now!"
}

install_for_debian() {
  check_os_is_debian
  install_inotify_tools
  check_elixir_installed
  build
  create_config_files
  create_symlink_to_local_bin
  echo "Everything installed OK"
  echo "You should now simply be able to run 'polyglot_watcher_v2' now!"
}

install_for_nixos() {
  create_config_files
  create_symlink_to_local_bin
  echo_success "✓ Installation successful!"
}

system_kind=$OSTYPE:$(awk -F'=' '/^ID=/ {print $2}' /etc/os-release)
case "$system_kind" in
  darwin*:*)           install_for_mac ;;
  linux-gnu*:nixos)    install_for_nixos ;;
  linux-gnu*:debian)   install_for_debian ;;
  *)                   echo "This script doesn't explicitly supported your deleted OS $system_kind. It probably will work if you adapt this script!" && exit 1 ;;
esac
